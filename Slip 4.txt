1)Implement the C Program to create a child process using fork(), display parent 
and child process id. Child process will display the message “I am Child Process” 
and the parent process should display “I am Parent Process”. 
Ans:
#include <stdio.h>
#include <unistd.h>
int main() {
 int pid = fork();
 if (pid > 0) {
 printf("I am Parent Process. PID = %d\n", getpid());
 } 
 else if (pid == 0) {
 printf("I am Child Process. PID = %d, Parent PID = %d\n", getpid(), 
getppid());
 } 
 else {
 printf("Fork failed!\n");
 }
 return 0;
}
2)Write the program to simulate FCFS CPU-scheduling. The arrival time and first 
CPU burst for different n number of processes should be input to the algorithm. 
Assume that the fixed IO waiting time (2 units). The next CPU-burst should be 
generated randomly. The output should give Gantt chart, turnaround time and 
waiting time for each process. Also find the average waiting time and turnaround 
time.
Ans:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main() {
 int n, i;
 printf("Enter number of processes: ");
 scanf("%d", &n);
 int at[n], bt[n], wt[n], tat[n], ct[n];
 srand(time(0)); // For random numbers
 for (i = 0; i < n; i++) {
 printf("Enter Arrival Time and First CPU Burst for P%d: ", i+1);
 scanf("%d %d", &at[i], &bt[i]);
 }
 int time = 0, io = 2;
 float totalWT = 0, totalTAT = 0;
 printf("\nGantt Chart: ");
 for (i = 0; i < n; i++) {
 if (time < at[i]) time = at[i];
 printf("| P%d ", i+1);
 time += bt[i] + io;
 ct[i] = time;
 tat[i] = ct[i] - at[i];
 wt[i] = tat[i] - bt[i];
 totalWT += wt[i];
 totalTAT += tat[i];
 bt[i] = rand() % 10 + 1; // Next CPU burst randomly
 }
 printf("|\n\n");
 printf("Process\tAT\tBT\tTAT\tWT\n");
 for (i = 0; i < n; i++)
 printf("P%d\t%d\t%d\t%d\t%d\n", i+1, at[i], bt[i], tat[i], wt[i]);
 printf("\nAverage Waiting Time = %.2f\n", totalWT/n);
 printf("Average Turnaround Time = %.2f\n", totalTAT/n);
 return 0;
}
