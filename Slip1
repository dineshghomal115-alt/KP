1)Write a program that demonstrates the use of nice() system call. After a child 
process is started using fork(), assign higher priority to the child using nice() 
system call. shorrt and simple without comm
Ans:
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>
int main() {
 pid_t pid = fork();
 if (pid == 0) {
 nice(-5);
 printf("Child process with higher priority\n");
 } else {
 wait(NULL);
 printf("Parent process\n);
 }
 return 0;
}
2)Write the program to simulate Round Robin (RR) scheduling. The arrival time 
and first CPU-burst for different n number of processes should be input to the 
algorithm. Also give the time quantum as input. Assume the fixed IO waiting time 
(2 units). The next CPU-burst should be generated randomly. The output should 
give Gantt chart, turnaround time and waiting time for each process. Also find the 
average waiting time and turnaround time.
Ans:
#include <stdio.h>
int main() {
 int n, tq, bt[10], rt[10], t = 0, done = 0;
 int wt[10], tat[10];
 float avgwt = 0, avgtat = 0;
 printf("Enter number of processes: ");
 scanf("%d", &n);
 for (int i = 0; i < n; i++) {
 printf("Burst time of P%d: ", i + 1);
 scanf("%d", &bt[i]);
 rt[i] = bt[i];
 }
 printf("Enter Time Quantum: ");
 scanf("%d", &tq);
 printf("\nGantt Chart:\n");
 while (done < n) {
 for (int i = 0; i < n; i++) {
 if (rt[i] > 0) {
 int exec = (rt[i] > tq) ? tq : rt[i];
 printf("| P%d (%d-%d) ", i + 1, t, t + exec);
 t += exec;
 rt[i] -= exec;
 if (rt[i] == 0) {
 tat[i] = t;
 wt[i] = tat[i] - bt[i];
 avgwt += wt[i];
 avgtat += tat[i];
 done++;
 }
 }
 }
 }
 printf("|\n\nProcess\tBT\tTAT\tWT\n");
 for (int i = 0; i < n; i++)
 {
 printf("P%d\t%d\t%d\t%d\n", i + 1, bt[i], tat[i], wt[i]);
 }
 printf("\nAverage WT = %.2f\n", avgwt / n);
 printf("Average TAT = %.2f\n", avgtat / n);
 return 0;
}
