1)Write a program that demonstrates the use of nice() system call. After a child 
process is started using fork(), assign higher priority to the child using nice() 
system call. 
Ans:
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/resource.h>
int main() {
 pid_t pid = fork();
 if (pid == 0) {
 nice(-5);
 printf("Child process with higher priority\n");
 } else {
 wait(NULL);
 printf("Parent process\n);
 }
 return 0;
}
2)Write the simulation program to implement demand paging and show the page 
scheduling and total number of page faults for the following given page reference 
string. Give input n as the number of memory frames. Reference String : 
12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8 
1) Implement LRU
Ans:
#include <stdio.h>
int main() {
 int frames[10], last[10], n, i, j, pageFaults=0, pos;
 int ref[16]={12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};
 
 printf("Enter number of frames: ");
 scanf("%d",&n);
 for(i=0;i<n;i++){ frames[i]=-1; last[i]=-1; }
 printf("Ref\tFrames\tFault\n");
 for(i=0;i<16;i++){
 int found=0;
 for(j=0;j<n;j++)
 if(frames[j]==ref[i]){ found=1; last[j]=i; break; }
 if(!found){
 pageFaults++;
 int empty=-1;
 for(j=0;j<n;j++) if(frames[j]==-1){ empty=j; break; }
 if(empty!=-1){ frames[empty]=ref[i]; last[empty]=i; }
 else{
 int min=last[0]; pos=0;
 for(j=1;j<n;j++) if(last[j]<min){ min=last[j]; pos=j; }
 frames[pos]=ref[i]; last[pos]=i;
 }
 }
 printf("%d\t",ref[i]);
 for(j=0;j<n;j++) if(frames[j]!=-1) printf("%d ",frames[j]);
 printf("\t%s\n",found?"No":"Yes");
 }
 printf("Total Page Faults=%d\n",pageFaults);
 return 0;
}