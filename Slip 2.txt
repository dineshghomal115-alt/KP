1)Implement the C Program to create a child process using fork(), display parent 
and child process id. Child process will display the message “I am Child Process” 
and the parent process should display “I am Parent Process.
Ans:
#include <stdio.h>
#include <unistd.h>
int main() {
 pid_t pid = fork();
 if (pid == 0) {
 printf("I am Child Process, PID = %d\n", getpid());
 } else {
 printf("I am Parent Process, PID = %d\n", getpid());
 }
 return 0;
}
2)) Write the program to simulate FCFS CPU-scheduling. The arrival time and first 
CPUburst for different n number of processes should be input to the algorithm. 
Assume that the fixed IO waiting time (2 units). The next CPU-burst should be 
generated randomly. The output should give Gantt chart, turnaround time and 
waiting time for each process. Also find the average waiting time and turnaround 
time.
Ans:
#include <stdio.h>
#include <stdlib.h>
int main() {
 int n, i;
 printf("Enter no. of processes: ");
 scanf("%d", &n);
 int at[10], bt[10], wt[10], tat[10];
 for (i = 0; i < n; i++) {
 printf("Enter Arrival & Burst time of P%d: ", i + 1);
 scanf("%d%d", &at[i], &bt[i]);
 }
 int t = 0, io = 2;
 float avgwt = 0, avgtat = 0;
 printf("\nGantt Chart: ");
 for (i = 0; i < n; i++) {
 if (t < at[i]) t = at[i];
 t += bt[i] + io;
 tat[i] = t - at[i];
 wt[i] = tat[i] - bt[i];
 avgwt += wt[i];
 avgtat += tat[i];
 printf("|P%d", i + 1);
 }
 printf("|\n\nProcess\tAT\tBT\tTAT\tWT\n");
 for (i = 0; i < n; i++)
 { printf("P%d\t%d\t%d\t%d\t%d\n", i + 1, at[i], bt[i], tat[i], wt[i]);
 }
 printf("\nAvg WT=%.2f Avg TAT=%.2f\n", avgwt / n, avgtat / n);
 return 0;
}
